import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import java.awt.*;
import java.awt.event.*;
import java.io.*;
import java.util.List;

public class EmployeeAppGUI {
    private JFrame loginFrame, mainFrame;
    private JTable table;
    private DefaultTableModel tableModel;
    private JTextField[] fields = new JTextField[7];
    private final String[] labels = {"Employee No", "Last Name", "First Name", "SSS No", "PhilHealth No", "TIN", "Pag-IBIG No"};
    private JButton viewButton, updateButton, deleteButton, addButton;
    private List<Employee> employees;
    private int selectedRow = -1;

    public EmployeeAppGUI() {
        showLoginScreen();
    }

    private void showLoginScreen() {
        loginFrame = new JFrame("MotorPH Login");
        loginFrame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        loginFrame.setSize(300, 200);
        loginFrame.setLayout(new GridLayout(4, 1));

        JPanel userPanel = new JPanel(new FlowLayout());
        JLabel userLabel = new JLabel("Username:");
        JTextField userField = new JTextField(15);
        userPanel.add(userLabel);
        userPanel.add(userField);

        JPanel passPanel = new JPanel(new FlowLayout());
        JLabel passLabel = new JLabel("Password:");
        JPasswordField passField = new JPasswordField(15);
        passPanel.add(passLabel);
        passPanel.add(passField);

        JButton loginButton = new JButton("Login");
        loginButton.addActionListener(e -> {
            String username = userField.getText().trim();
            String password = new String(passField.getPassword()).trim();

            if (EmployeeDataHandler.validateLogin(username, password)) {
                loginFrame.dispose();
                showMainFrame();
            } else {
                JOptionPane.showMessageDialog(loginFrame, "Invalid username or password.", "Login Failed", JOptionPane.ERROR_MESSAGE);
            }
        });

        loginFrame.add(userPanel);
        loginFrame.add(passPanel);
        loginFrame.add(new JPanel()); // Spacer
        loginFrame.add(loginButton);

        loginFrame.setVisible(true);
    }

    private void showMainFrame() {
        mainFrame = new JFrame("MotorPH Employee App");
        mainFrame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        mainFrame.setSize(1000, 500);

        tableModel = new DefaultTableModel(labels, 0);
        table = new JTable(tableModel);
        table.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        JScrollPane tableScroll = new JScrollPane(table);

        JPanel formPanel = new JPanel(new GridLayout(8, 2));
        for (int i = 0; i < labels.length; i++) {
            formPanel.add(new JLabel(labels[i]));
            fields[i] = new JTextField();
            formPanel.add(fields[i]);
        }

        viewButton = new JButton("View All");
        addButton = new JButton("Add");
        updateButton = new JButton("Update");
        deleteButton = new JButton("Delete");

        viewButton.addActionListener(e -> refreshTable());
        addButton.addActionListener(e -> addEmployee());
        updateButton.addActionListener(e -> updateEmployee());
        deleteButton.addActionListener(e -> deleteEmployee());

        JPanel buttonPanel = new JPanel(new FlowLayout());
        buttonPanel.add(viewButton);
        buttonPanel.add(addButton);
        buttonPanel.add(updateButton);
        buttonPanel.add(deleteButton);

        table.getSelectionModel().addListSelectionListener(e -> {
            selectedRow = table.getSelectedRow();
            if (selectedRow >= 0 && selectedRow < employees.size()) {
                Employee emp = employees.get(selectedRow);
                fields[0].setText(emp.getEmpNo());
                fields[1].setText(emp.getLastName());
                fields[2].setText(emp.getFirstName());
                fields[3].setText(emp.getSssNo());
                fields[4].setText(emp.getPhilHealthNo());
                fields[5].setText(emp.getTin());
                fields[6].setText(emp.getPagIbigNo());
            }
        });

        mainFrame.add(tableScroll, BorderLayout.CENTER);
        mainFrame.add(formPanel, BorderLayout.EAST);
        mainFrame.add(buttonPanel, BorderLayout.SOUTH);
        refreshTable();
        mainFrame.setVisible(true);
    }

    private void refreshTable() {
        employees = EmployeeDataHandler.readEmployeesFromCSV("employees.csv");
        tableModel.setRowCount(0);
        for (Employee emp : employees) {
            tableModel.addRow(new Object[]{
                emp.getEmpNo(), emp.getLastName(), emp.getFirstName(),
                emp.getSssNo(), emp.getPhilHealthNo(), emp.getTin(), emp.getPagIbigNo()
            });
        }
    }

    private void addEmployee() {
        Employee emp = createEmployeeFromFields();
        if (emp != null) {
            employees.add(emp);
            EmployeeDataHandler.writeEmployeesToCSV(employees, "employees.csv");
            refreshTable();
            clearFields();
        }
    }

    private void updateEmployee() {
        if (selectedRow >= 0) {
            Employee updatedEmp = createEmployeeFromFields();
            if (updatedEmp != null) {
                employees.set(selectedRow, updatedEmp);
                EmployeeDataHandler.writeEmployeesToCSV(employees, "employees.csv");
                refreshTable();
                clearFields();
            }
        }
    }

    private void deleteEmployee() {
        if (selectedRow >= 0) {
            employees.remove(selectedRow);
            EmployeeDataHandler.writeEmployeesToCSV(employees, "employees.csv");
            refreshTable();
            clearFields();
        }
    }

    private Employee createEmployeeFromFields() {
        try {
            return new Employee(
                fields[0].getText().trim(),
                fields[1].getText().trim(),
                fields[2].getText().trim(),
                fields[3].getText().trim(),
                fields[4].getText().trim(),
                fields[5].getText().trim(),
                fields[6].getText().trim()
            );
        } catch (Exception e) {
            JOptionPane.showMessageDialog(mainFrame, "Please fill in all fields correctly.", "Error", JOptionPane.ERROR_MESSAGE);
            return null;
        }
    }

    private void clearFields() {
        for (JTextField field : fields) {
            field.setText("");
        }
    }

    public static void main(String[] args) {
        SwingUtilities.invokeLater(EmployeeAppGUI::new);
    }
}
